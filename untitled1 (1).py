# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VkbHO8AXbVcTzqCX7kUTkzg26rkGjRml
"""

#add the elements between the range of m and n
#m=5 n=9
m=int(input())
n=int(input())
sum=0
while(m<=n):
  sum=sum+m
  m=m+1
print("sum=",sum)





#program to find the sum of digits in a number
#123.....1+2+3=6
sum=0
num=int(input("ENter the number: "))
while(num!=0):
  temp=num%10
  sum=sum+temp 
  num=num//10
print("the sum of digits ",sum)

#chech nivens/harshed number or not
num=int(input("enter the number"))
sum=0
rem=0
while(temp>0):
  rem=temp%10
  sum=sum+rem
  temp=temp//10
print("sum=",sum)
if num%sum==0:
  print("the given number is harshed")
else:
  print("The number is not harshed")

#reverse of a number
#123.....3 2 1
n=input("Enter number")
n1=n[::-1]
n2=" ".join(n1)
print(n2)

#in functions 
def reverse(n):
  if len(n)==0:
    return n 
  return reverse(n[1:]) +n[0]
num=123
n_string=str(num)
r_num=reverse(" ".join (n_string))
print("reversed number is:" ,r_num)

#average of first n number
n=int(input())
avg=0
s=0
for i in range (1, n+1):
  s=s+i
avg=s+i
print("sum=",s)
print("avg=",avg)

#table printing
n=int(input())
for i in range(1,11):
 print(n,"X",i, "=",n*i)

#print 1+1/2+1/3+----+1/n
n=int(input())
s=0.0
for i in range(1,n+1):
    a=1.0/i
    s=s+a
print("the sum of 1,1/2...1/",str(n)+"is"+str(s))

#print 1+1/2^2+1/3^2+----+1/n^2
n=int(input())
s=0.0
for i in range(1,n+1):
    a=1.0/(i**2)
    s=s+a
print("the sum of 1,1/2...1/",str(n)+"is"+str(s))

#$$$hi$$$
s="hi"
print(s.capitalize())

str="ll"
substr="hehellhehell"
print(substr.count(str,0,len(substr)))

str="she is my cousin"
print(str,fine("my",0,len(str)))

str="hi"
print(str.rjust(20,'^'))

str="6"
print(str.zfill(14))

#syntax for zfill(width)
str="the pormetheus has a ship"

print(list(enumerate(str)))

str="abhi ram"
for i in str:
  print(i, end=' ')

#caeser cipher
str="Abhi"
index=0
while index < len(str):
  letter=str[index]
  print(chr(ord(letter)+ 1), end=' ')
  index +=1

n=int(input())
list=[]

str1="ABHI"
str2="RAM"
for letter in str1:
  print(letter, str2, end=" ")

rows=int(input("enter number of rows"))
for i in range(rows):
    for j in range(i+1):
        print(j+1,end="")
    print("\n")

rows=int(input("Enter rows: "))
for i in range(1, rows+1):
  for j in range(1, rows+i):
    if(j<i):
      print(' ',end=' ')
      else:
        print(j+1, end=" ")

#diamond or rhombus patter
rows=int(input("Enter rows"))
i=1
while i<=rows:
  j=rows
  while j>i:
    print(' ', end=' ')
    j-=1
    print('*', end=' ')
    k=1
    print('*', end=' ')
    k=1
    while k<2 *(i-1):
      print(' ', end=' ')
      k+=1
    if i==1:
      print()
    else:
      print('*')
      i+=1
i=rows-1
while i>=1:
    j=rows
    while j>1:
      print('*', end=' ')
      j-=1
    print('*', end=' ')
    k=1
    while k<2 *(i-1):
      print(' ', end=' ')
      k+=1
    if i==1:
      print()
    else:
        print('*')
    i-=1

a=65
r=5
m=(2*a) -2
for i in range(0,r):
  for j in range(0,m):
    print(end=" ")
  m=m-1
  for j in range(0, i+1):
    ch =chr(a)
    print(ch, end=' ')
    a+=1
  print(" ")

def diff(a,b):
   return a-b
x=20
y=10
operation=diff
print(operation(x,y))

#function access of variable in inner and outer function
def outer_fun():
  outer_var=11
  def inner_fun():
    inner_var=22
    print(outer_var)
    print(inner_var)
inner_fun()
    print("Outer variable", outer_var)a

#program to demo access of var in inner & outer func
def outer_fun():
  var=11
  def inner_fun():
    var=22
    print(var)
  inner_fun()
  print(var)
outer_fun()

#writing a function anf return its cubation format
def cube(x):
  return(x*x*x)
num=10
result=cube(num)
print("cube of",num," ",result)

#writing a function to understand  a mismatch parameters
def abc(x):
  print("hi",x)
abc(5)

#writing a function to understand  a mismatch parameters
def fun(i):
  print("red",i)
j=10
fun(j)

#program to demo key args
def display(str,int_x,float_y):
  print("str is",str)
  print("integer is",int_x)
  print("float is",float_y)
display(float_y=123.45,str="hi",int_x=1234)

#program to demo key args
def display(name, age, salary):
  print("Name is", name)
  print("Age is: ", age)
  print("salary is", salary)
a="Abhi"
b=20
c=50000
display(salary=c, name=a, age=b)

add=lambda x,y,z:x+y+z
print("sum=",add(10,20,30))

#program to find smaller number by lambda
def small(a,b):
  if(a<b):
    return a
  else:
    return b
add= lambda x,y: x+y
diff= lambda x,y:x-y
print("smaller of two no.",small(add(-3,-2),diff(-1,2)))

#pass a lambda fun as an function arg
def fun(f,n):
  print(f(n))
twice=lambda x: x*2
triple = lambda x: x*3
fun(twice,4)
fun(triple,3)

x=lambda:sum(range(1,11))
print(x())

#calculate SI. If the customer is senior citizen, He is being offered 12% ROI, for all the customers the ROI is 10%
p=200
r=3
si= pxrxROI/100

def fact(n):
  if(n==1 or n==0):
    return 1
  else:
    return n*fact(n-1)
n=int(input())
print(fact(n))

#fibinocci series
def fib(n):
  if n<2:
     return 1
  return (fib(n-1)+fib(n-2))
n=int(input("enter range: "))
for i in range(n):
    print(fib(i), end=" ")



#towes of hanoi
def towers(n,src,aux,dest):
  if(n==1):
    print("\n move disk ",n, "from",src,"to",dest)
    return
  towers(n-1,src,dest,aux)
  print("\n move disk",n,"from",src,"to",dest)
  towers(n-1,aux,src,dest)
n=int(input())
towers(n,'A','B','C')

#exp(x,y) using recusion function
def expo(x,y):
  if y==0:
    return 1
  else:
    return(x*expo(x,y-1))
n=int(input())
m=int(input())
print("result: ",expo(n,m))

def hanoi(n,  A,B,C):
  if n>0:
    hanoi(n-1,A,C,B)
    if A:
      C.append(A.pop())
    hanoi(n-1, B,A,C)
A=[1,2,3,4]
B=[]
C=[]
print(A,B,C)
hanoi(len(A),A,B,C)

def fibonacci(n):
    a = 0
    b = 1
    if n < 0:
        print("Incorrect input")
    elif n == 0:
        return a
    elif n == 1:
        return b
    else:
        for i in range(2,n+1):
            c = a + b
            a = b
            b = c
        return b
print("Fibonacci numbers between 0 and 50 are:")
for i in range(51):
    print(fibonacci(i),end=" ")

def fib(n):
    if n<2:
      return 1
    else:
      return fib(n-1)+fib(n-2)
for i in range(0,10):
  if(fib(i)>50):
      break
  print(fib(i),  end=" ")

string=input()
sum=0
for i in range(0,len(string)):
    sum+=ord(string[i])
print(sum)

x=7
y=5
p=25
q=35
c=0
for i in range(p,q+1):
  if(i%x==0 and i%y==0):
    c=c+1
print(c)

#program to access a class member using class obj
class abc:
  var=22
  def display(self):
    print("class member")
obj=abc()
print(obj.var)
obj.display()

#program to access a class member using class obj
class abc:
  var=22
  var2=33
obj=abc()
print(obj.var)
print(obj.var2)

#program to illustrate the constructor
class abc:
  def __init__(self, val):
    print("in class method")
    self.val=val
    print("The value is: ", val)
obj=abc(10)

n=int(input())
if n<=0:
    print("Invalid Input")
l=input()
x=l.split(" ")
f=[]
flo=[]
fle=[]
fl=[]
for i in range(0,n):
    f.append(int(x[i]))
f.sort()
for i in range(0,n):
    if(f[i]%2==0):
        fle.append(f[i])
    else:
        flo.append(f[i])
fl=fle+flo
for i in range(n):
    print(fl[i],end=" ")

#get input and initialize variables
decimal = int(input())
binary = 0
ctr = 0
temp = decimal  #copy input decimal

#find binary value using while loop
while(temp > 0):
    binary = ((temp%2)(10*ctr)) + binary
    temp = int(temp/2)
    ctr += 1

#output the result       
print("{y}".format(x=decimal,y=binary))

#_repr_ -------syntax repot of object
#_cmp_ -----------compares two class objects
#_len_ ---------len(object)
#_call_ -------it acts like a func to call its instances
# _It,le,eq,ne,gt,ge_  ----------
#_iter_ iteration over an object
#_getitem_ ----------used for indexing
#gs: def _getitem_(self,var/key):
#set item assign an item to the indexed value

#program to demonstrate get and set items in a list
class n:
  def __init__(self,mylist):
    self.mylist=mylist
  def __getitem__(self, index):
    return self.mylist[index]
  def __setitem__(self,index,val):
    self.mylist[index]= val
numlist = n([1,2,3,4,5,6,7,8,9])
numlist[3]=100
print(numlist[8])
print(numlist.mylist)

class ABC():
  def __init__(self,name,var):
    self.name=name 
    self.var=var
  def __repr__(self):
    return repr(self.var)
  def __len__(self):
    return len(self.name)
  def __cmp(self):
    return self.var - obj.var 
obj=ABC("abcdef",10)
print("The value stored in the object is: ", repr(obj))

# "is" illustrating use of private method
def abc():
  def __init__(self, var):
    self.__var=var
  def __display(self):
    print("this from class method, var= ", self.__var )
obj=abc(10)
obj._abc__display()

#to call a class method from another method of same class
class abc():
  def __init__(self,var):
    self.var=var
  def display(self):
    print("var is=",self.var)
  def add_2(self):
    self.var+=2
    self.display()
obj=abc(10)
obj.add_2()

#program to show how a class method calls a function which defined in the globl name space
def scale_10(x):
  return x*10
class abc():
  def __init__(self,var):
    self.var=var
  def display(self):
      print("var is =",self.var)
  def modify(self):
      self.var=scale_10(self.var)
obj=abc(10)
obj.display()
obj.modify()
obj.display()

#built-in-attributes
#for get set and delete
#hasattr(obj,name)-checks obj possesses the attributes values or not
#getattr(obj, name[,default])
#setattr(obj, name,value)----- which is used to set an attr of the obj
#delattr(obj,name)----------

def multiply_array(arr): 
    if len(arr) <= 0:
        print("Invalid Input")
        return
    product = 1
    for i in arr: 
        product = product * i
    return product 

arr = [1, 2, 3, 4] 
print(multiply_array(arr))

n=int(input())
if n<=0:
    print("Invalid Input")
else:

 l=input()
 x=l.split(" ")
 f=[]
 flo=[]
 fle=[]
 fl=[]
 for i in range(0,n):
    f.append(int(x[i]))
 f.sort()
 for i in range(0,n):
    if(f[i]%2==0):
        fle.append(f[i])
    else:
        flo.append(f[i])
 fl=fle+flo
 for i in range(n):
    print(fl[i],end=" ")

#Abstract class
class fruits:
    def taste(self):
        raise NotImplementedError()
        #abs lacks required derivred class
        #by raising an exception
    def rich(self):
        raise NotImplementedError()
    def color(self):
        raise NotImplementedError()
class mango(fruits):
    def taste(self):
        return "sweet"
    def rich(self):
        return "vitamin A"
    def color(self):
        return "Golden yellow"
class orange(fruits):
    def taste(self):
        return "sour"
    def rich(self):
        return "vitamin C"
    def color(self):
        return "Orange"
Alphanso=mango()
print(Alphanso.taste(),Alphanso.rich(),Alphanso.color())
o=orange()
print(o.taste(),o.rich(),o.color())

#program to interviene polymorphism on the complex number
class Complex():
    def __init__(self):
        self.real=0
        self.img=0
    def setValue(self,real,img):
        self.real=real
        self.img=img
    def __add__(self,c):
        temp=Complex()
        temp.real=self.real+c.real
        temp.img=self.img+c.img
        return(temp)
    def display(self):
        print("(",self.real,"+",self.img,"i)")
c1=Complex()
c1.setValue(1,2)
c2=Complex()
c2.setValue(3,4)
c3=c1+c2
print("result is....")
c3.display()

n=int(input())
if n<=0:
    print("Invalid Input")
else:
 l=input()
 il=[int(x) for x in l.split()]
 pr=1
 for i in il:
    pr=pr*i
 print(pr)

l=input()
il=[int(i) for i in l.split(",")]
tem=il[0]
il[0]=il[-1]
il[-1]=tem
for i in range(len(il)-1):
    print(il[i],end=',')
print(il[-1])

l=input()
il=[int(i) for i in l.split()]
c=0
for i in range(len(il)):
    for j in range(len(il)):
        if i!=j:
            if il[i]==il[j]:
                c=c+1
if c==0:
    print("False")
else:
    print("True")

n=int(input())
if n<=0 or n%2!=0:
    print("Invalid Input")
    exit
else:
    l=input()
    if len(l)==0 :
        print("Invalid Input")
        exit
    else:
        m=int(input())
        k=0
        p=0
        f=[int(i) for i in l.split()]
        while(k<n):
            if p==m:
                print()
                print(f[k])
                p=1
            else:
                print(f[k])
                p=1
            k+=1

# Commented out IPython magic to ensure Python compatibility.
'''
operator ---------------function name-------------
+                         _add_
+=                        _iadd_
-                         _sub_
-=                        _isub_
*                         _mul_
*=                        _imul_
/                         _truediv_
/=                        _idiv_
**                        _pow_
**=                       _ipow_
# %                         _mod_
# %=                        _imod_
>>                        _rshift_
<<                        _lshift_
>>=                       _irshift_
<<=                       _ilshift_
&                         _and_
&=                        _iand_
|                         _or_
|=                        _ior_
^                         _xor_
^=                        _ixor_
~                         _invert_
~=                        _iinvert_
>                         _gt_
<                         _lt_
>=                        _ge_
<=                        _le_
'''

#program that has abstract class to drive 2 classes
#rectangle and triangle from polgon class and
#write the methods to get their details and dimensions
#and hence calculate the area respectlively
class polygon:
    def get__data(self):
        raise notImplementedError()
    def area(self):
        raise notimplemenetedError()
class rectangle(polygon):
    def get__data(self):
        self.length=float(input("Enter rectangle length="))
        self.breadth=float(input("Enter rectangle breadth="))
    def area(self):
        return self.length*self.breadth
class triangle(polygon):
    def get__data(self):
        self.base=float(input("Enter triangle base="))
        self.height=float(input("Enter triangle height="))
    def area(self):
        return 0.5*self.base*self.height
R=rectangle()
R.get__data()
print("area of a rectangle",R.area())
T=triangle()
T.get__data()
print("area of a triangle",T.area())

#Encapsulation public members
class pub:
    def __init__(self,name,num):
        self.name=name
        self.num=num
    def Num(self):
        print("roll num is ",self.num)
obj=pub("harry",224)
obj.Num()

#program to overload the _call_ method
class multi:
    def __init__(self,num):
        self.num=num
    def __call__(self,o):
        return self.num*o
x=multi(10)
print(x(5))

#program to over-ride get-item and set-item methods
class mylist:
    def __init__(self,List):
        self.List=List
    def __getitem__(self,index):
        return self.List[index]
    def __setitem__(self,index,num):
        self.List[index]=num
    def __len__(self):
        return len(self.List)
    def display(self):
        print(self.List)
L=mylist([1,2,3,4,5,6,7,8,9])
print("list is.........")
L.display()
index=int(input("enter the index of the list="))
print(L[index])
index=int(input("enter the index of the list="))
num=int(input("Enter the position u want to modify="))
L[index]=num
L.display()
print("the length of the list is",len(L))

class number:
    def __init__(self,num):
        self.num=num
    def display(self):
        return self.num
    def __abs__(self):
        return abs(self.num)
    def __float__(self):
        return float(self.num)
    def __hex__(self):
        return hex(self.num)
    def __oct__(self):
        return oct(self.num)
    def __setitem__(self,num):
        self.num=num
n=number(14)
print("n is=",n.display())
print("abs(n) is=",abs(n))
n=abs(n)
print("coverting to float",float(n))
print("coverting to hexa",hex(n))
print("coverting to octal",oct(n))

#to visualize inheritance flow
class person:
    def __init__(self,name,age):
        self.name=name
        self.age=age
    def display(self):
        print("name is ",self.name)
        print("age is",self.age)
class teacher(person):
        def __init__(self,name,age,exp,rarea):
            person.__init__(self,name,age)
            self.exp=exp
            self.rarea=rarea
        def displaydata(self):
            person.display(self)
            print(("experience is ",self.exp))
            print("rarea is ",self.rarea)
class student(person):
    def __init__(self,name,age,course,marks):
        person.__init__(self,name,age)
        self.course=course
        self.marks=marks
    def displaydata(self):
        person.display(self)
        print("course=",self.course)
        print("marks=",self.marks)
print(".....................teacherclass..............")
t=teacher("mark",43,20,"jss")
t.displaydata()
print("............student class/........")
s=student("ram",23,"daa",89)
s.displaydata()

#program to invoke _init_in multiple inheritance
class base1(object):
    def __init__(self):
        print("base class 1")
class base2(object):
    def __init__(self):
        print("base class 2")
class Derived(base1,base2):
    pass
D=Derived()

#program to call constructor of a base class from super
class base1(object):
    def __init__(self):
        print("base class 1")
        super(base1,self).__init__()
class base2(object):
    def __init__(self):
        print("base class 2")
class Derived(base1,base2):
    pass
D=Derived()

class base1(object):
    def __init__(self):
        print("base class 1")
        super(base1,self).__init__()
class base2(object):
    def __init__(self):
        print("base class 2")
class Derived(base1,base2):
    def __init__(self):
        super(Derived,self).__init__()
        print("Dervied class")
D=Derived()

n = int(input())
arr = list(map(int, input().split()))

# Initialize counters for positive and negative integers
positives = 0
negatives = 0

# Iterate over the array and count the positive and negative integers
for x in arr:
    if x > 0:
        positives += 1
    elif x < 0:
        negatives += 1

# Print the result
print(positives)
print(negatives)

n=int(input())
max=0
count=0
flag=0
s=input()
arr

n=int(input())
w=int(input())
if w%1==1 or w<2 or w<=n:
    print("invaid input")
else:
    a=(4*n-w)//2
print("2 wheelers=",a)
print("4 wheelers=",(n-a))

class bt:
    def __init__(self,data):
        self.data=data
        self.lc=None
        self.rc=None
def insert(root,newvalue):
    if root is None:
        root=bt(newvalue)
        return root
    if newvalue<root.data:
        root.lc=insert(root.lc,newvalue)
    else:
        root.rc=insert(root.rc,newvalue)
    return root
def inorder(root):
    if root==None:
        return
    inorder(root.lc)
    print(root.data)
    inorder(root.rc)
def preorder(root):
    if root==None:
        return
    print(root.data)
    preorder(root.lc)
    preorder(root.rc) 
def postorder(root):
    if root==None:
        return
    postorder(root.lc)
    postorder(root.rc)
    print(root.data)
root=insert(None,15)
insert(root,10)
insert(root,24)
insert(root,5)
insert(root,14)
insert(root,22)
insert(root,55)
print("inorder =")
inorder(root)
print("preorder")
preorder(root)
print("postorder")
postorder(root)

n=int(input())
l=input()
il=[int(i) for i in l.split()]
a=[]
b=[]
for i in il:
    if i%2==0:
        a.append(i)
    else:
        b.append(i)
il=a+b
for i in il:
    print(i,end=(' '))

#write a program to combine list to a dictonary from a hash table
keys=['NAME', 'AGE', 'BRANCH']
values = ['ABHI','20', 'AURONOTICAL']
d={keys[i]:values[i] for i in range(len(keys))}
print(d)

l=[[0,0,0,1,0],[2,0,0,0,3],[0,0,0,4,0]]

class node:
    def __init__(self, data=None):
        self.data=data
        self.next=None
class ll:
    def __init__(self):
        self.head=None
    def insert(self,data):
        nn=node(data)
        nn.next=self.head
        self.head=nn
    def printlist(self):
        c=self.head
        while c is not None:
            print(c.data)
            c=c.next
ll1=ll()
ll1.insert(1)
ll1.insert(4)
ll1.printlist()

class bt:
    def __init__ (self,data):
        self.data=data
        self.lc= None
        self.rc= None
def insert(root, newvalue):
    if root is None:
        root = bt(newvalue)
        return root
    if newvalue<root.data:
        root.lc=insert(root.lc,newvalue)
    else:
        root.rc=insert(root.rc,newvalue)
    return root
def inorder(root):
    if root == None:
        return 
    inorder(root.lc)
    print(root.data)
    inorder(root.rc)
def preorder(root):
    if root == None:
        return
    print(root.data)
    preorder(root.lc)
    preorder(root.rc)
def postorder(root):
    if root == None:
        return
    postorder(root.lc)
    postorder(root.rc) 
    print(root.data)
root = insert(None,15)
insert(root,10)
insert(root,24)
insert(root,5)
insert(root,14)
insert(root,22)
insert(root,55)
print("inorder traversal:")
inorder(root)
print("preorder traversal:")
preorder(root)
print("postorder traversal:")
postorder(root)

#greatest of 3
a=int(input())
b=int(input())
c=int(input())
if a>b and a>c :
  print(a)
if b>a and b>c :
  print(b)
else:
  print (c)

a,b,c= input().split()
if a>b and a>c :
  print(a)
if b>a and b>c :
  print(b)
else:
  print (c)

#pattern
n=int(input())
for i in range(n+1):
  for j in range(i):
    print(j+1, end=" ")
  print()

#factorial
a=int(input())
n=1
for i in range(1,a+1):
    n=n*i
print(n)

#fibonacci
a=int(input())
n=0
for i in range(1,a+1):
    n=n+i
    print(n)

#Prime
n=int(input())
c=0
for i in range(1,n):
    if n%i==0:
     c=c+1
if c>2:
  print("Not a prime number")
else:
  print("prime")

#average of list
n=int(input())
l=[]
s=0
for i in range(n):
  a=int(input())
  l.append(a)
  s=s+a
avg=s/n
print(avg)

#removing items in list
n=int(input())
l=[]
for i in range(n):
  a=input()
  l.append(a)
l.remove(l[0])
l.remove(l[3])
l.remove(l[3])
print(l)

#remove empty tuple from the list
l=[(5,4,3), (), tuple(), (3,5,7)]
l=[i for i in l if len(i)>0]
print(l)

#product of tuple
n=int(input())
l=[]
for i in range(n):
    a=int(input())
    l.append(a)
t=tuple(l)
p=1
for i in t:
    p=p*i
print(p)

#counting the reapting

#reverse of a string

#to separate even and odds and zeros

#split a given dictonary of lists

n=int(input())
arr=[]
for i in range(n):
  username=input("Username: ") 
  password=input("Password: ")
  arr.append({username:password})
print(arr)

import random
arr=['rock','paper','scessor']
scount=0
ucount=0
while True:
    choice=input("enter choice")
    a=random.choice(arr)
    if(a==choice):
        print("TIE GAME")
    elif(choice==arr[0] and a==arr[1]):
        print("user has won the game ")
        ucount=ucount+1
    elif(choice==arr[1] and a==arr[0]):
        print("system has won ")
        scount=scount+1
    elif(choice==arr[0] and a==arr[2]):
        print("USER has won ")
        ucount=ucount+1
    elif(choice==arr[1] and a==arr[0]):
        print("system has won ")
        scount=scount+1
    elif(choice==arr[2] and a==arr[1]):
        print("system has won ")
        scount=scount+1
    elif(choice==arr[1] and a==arr[2]):
        print("system has won ")
        scount=scount+1
    if(scount==5):
        print("system has won")
        break
    elif(ucount==5):
        print("user has won ")
        break